//Deletion Part
route we are choosing /post/destroy/id

//from home.ejs

<% if(locals.user && locals.user.id == post.userId.id){ %>
          <a href="/post/destroy/<%=post.id%>" class="delete-post-button" style="color: red;">X</a>
<%}%>

module.exports.destroy = async function(req, res) {
    try {
        const post = await Post.findById(req.params.id);

        if (!post) {
            return res.redirect('back');
        }

        if (post.userId.toString() === req.user.id) {
            // await Post.deleteOne({});    //both works's
            await Post.deleteOne({ _id: req.params.id });
            await Comment.deleteMany({ postId: req.params.id });
            req.flash('success','Post and associated comments deleted');
            return res.redirect('back');
        } else {
            req.flash('error','You cannot delete this post!');
            return res.redirect('back');
        }
    }
};

//Deletion of Comments
    module.exports.destroy = async function(req, res) {
        const comment = await Comment.findById(req.params.id);
        if (!comment) {
            return res.redirect('back');
        }

        let postId = comment.postId;
        console.log(postId);


        const post = await Post.findById(postId);
        console.log(post.user);


        if (comment.userId == req.user.id  || post.userId == req.user.id) {
            const postId = comment.postId;
            await comment.deleteOne();
            await Post.findByIdAndUpdate(postId, { $pull: { commentsArray: req.params.id } });
            return res.redirect('back');
        } else {
            return res.redirect('back');
        }

    };


//User Profile Link

    1.) Show All Users on home.ejs

        <=> Home.ejs controllers
            const posts = await Post.find({})
                        .sort('-createdAt')
                        .populate('userId')
                        .populate({
                            path: 'commentsArray',
                            populate: {
                                path: 'userId'
                            }
                        })
                        // .exec();

                    const allUsers = await User.find({});

                    return res.render('home', {
                        title: "Codeial : Home",
                        all_posts: posts,
                        all_users: allUsers,
                    });

        <section id="user-friends">
                    <% for(u of all_users){  %>
                        <p>
                            <a href="/user/profile/<%=u.id%>">
                                <%= u.userName %>
                            </a>
                        </p>
                    <% } %>
        </section>

module.exports.profile = async function(req, res) {
    try {
        const user = await User.findById(req.params.id).exec();
        return res.render('profile', {
            title: 'User Profile',
            profile_user: user
        });
    }
};

route.get('/profile/:id',passport.checkAuthentication,userControllers.profile);
route.post('/update/:id',passport.checkAuthentication,userControllers.update);

profile.ejs

    <% if(user.id == profile_user.id){ %>
            <input type="text" name="userName" placeholder="Enter your name : " value="<%=profile_user.name%>" required>
            <input type="text" name="userEmailId" placeholder="Enter your email: " value="<%=profile_user.email%>" required>
            <input type="file" name="avatar" placeholder="Profile Picture">
            <input type="submit" value="Update">
        </form>
    <% } %>


    <p>Name : <%= profile_user.userName %> </p>
    <p>Email: <%= profile_user.userEmailId %></p>


UPDATE CONTROLLERS => TRY TO USE FIND ID AND UPDATE
module.exports.update = async function(req, res) {
    if(req.user.id == req.params.id){
        try{
            let user = await User.findById(req.params.id);

                user.userName = req.body.userName;
                user.userEmailId = req.body.userEmailId;

                user.save();
                return res.redirect('back');
            })



For Layout:

//for layout install npm install express-ejs-layouts
//use it by express and come in work before the route work start because layout updated before controller
//extract sytle and script from subpages into layout 

app.set('layout extractStyles',true);
app.set('layout extractScripts',true);

const expressLayouts = require('express-ejs-layouts');
app.use(expressLayouts);
// after using this layout.ejs(name is same) apply to all ejs file inside the body tag 












<-------    For Flash Messages  -------->

when i am signed in flash message stored to session cookie and when i am refresh that flash messages got erased .
Because when i refresh after signIn everytime it will show sign In successfully.
First time as i signed in that flash message was send as locals  in session cookie then it  erased


Flash messages are stored in session cookie  and they are cleared in next request.
1.) Set up the library  'Flash' ( npm install connect-flash  )     
2.) use after where session was set up between session cookie (passport) and routes app.use(flash())
3.) set up some message in user controller
    req.flash('success','Logged in successfully')  req. flash is an object
    this message need to be transfer to response one thing we can do pass into the locals everytime telling this is the flash message  and the type is success
    return res.redirect('home',{flash : {success: "asdf"}});
    The problem with that is everytime i have to send separate context just for the flash message
    So we create a custom middleware

    module.exports.setFlash = function(req,res,next){
        res.locals.flash = {
            'success': req.flash('success'),
            'error': req.flash('error'),
        }
        next();
    }
    next() is important becuase it pass res.local.flash or all information to next middleware or to response which is browser

    and require that middleware in index.js
    cont custumMMiddleware = require('../config/middleware.js');
    to use this middleware just after app.use(flash)  app.use( customMiddlware.setFlash);

    What we done till now
    a) First install connect-flash and include it with require
    b) Then set up to use app.use(flash());
    c) go to User controller Then put some flash message to req then
    c) take out that req and put in into the res we created a middleware



4.) to pass this flash message to ejs template we created a middleware which fetch everything from req.flash 
  & put into the locals
5.) finally use this middleware and access in templates
6.) we are going to access or print flash form layout.ejs , locals has flash so 

   <% flash.success && flash.success.length > 0 {%>
        <%= flash.success %>
   <% } %>

//code



//Noty Js -> used to look our notification looks better pop in pop out 
// include cdn noty min.css & min.js ( min means compressed files); in layout.ejs

//How to include it go to noty.js there is written syntax and we have to write in js please check
<script>
        // Display success flash message
        <% if (flash.success && flash.success.length > 0) { %>
            new Noty({
                theme: 'relax',
                text: "<%= flash.success %>",
                type: 'success',                // or error // or any key
                layout: 'topRight',
                timeout: 1500,
            }).show();
        <% } %>
</script>

// see passport .js how to use req


//JSON 
whenever we post whole page got refreshed that we don't want. To overcome that we are going 
to in corporate ajax, whenever we submit the form for creating post i submit via ajax get 
something in response which is in form of json and appended into our page.
1.)  we are using jquey ajax for that we have to include cdn for jquey ajax in layout becuase 
    we want all other pages to use that 
2.) we need to create Js file which fetches the data from the form and send in json format to the 
    action whenever i am submitting the form to create a new post it couldn't submitted via post 
    we could be submitted via jquery ajax 
3.) Making the home_post.js in assests/js/home_post.js

//File Upload 
1.) we store file in cloud or local storage but the address to the file we store in database 
2.) npm install multer
3.) Go to documentation